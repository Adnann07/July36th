#include "iGraphics.h"
#include <stdlib.h>
#include <time.h>
#define JUMP_LIMIT 200

using namespace std;
int a, b, p, w, h, bullet,s ,hb, jeep, p2, slideC;
float x = 0;
bool stand = true;
bool run = false;
bool runback = false;
float charPosX = 10;
float charY = 5;

const int jumpHeight = 100;
const int screenWidth = 600;
const int charWidth = 100;
const int p2Width = 200;
float carPosX = screenWidth;
float jeepPosX = screenWidth;
float p2X = screenWidth;
float heliX = screenWidth;
float heliWidth = 300;
float c1 = 0;
float c2 = 1000;
float carStopPos = 360;

float p2StopPos = 360;
float heliStop = 300;
const int carWidth = 300;
float wX = 1200;
bool jump = false;
bool jumpUp = false;
bool wShow = true;
int bulletX = 300;
int hbx = heliStop;
int hby = 40;
int cTime = 0;
int st = 0;
int st2 = 1000;

bool slide = false;


int j = 0;
int carA = 0;

const int cTime2 = 12000;
// Timer variables
int wTime = 0;
const int wTime2 = 3000;  // 20 seconds (in milliseconds)

bool bulletFired = false;  // Flag to control bullet firing
int btime = 1000;
int btime2 = 500000;
bool hbulletFired = false;
int hbtime = 0;
int hbtime2 = 20000;


float jeepX = screenWidth;

bool charRun = true;
bool charSlide = false;


int slideX = 0;
int slideT = 0;

bool carCollisionActive = false;
bool bulletCollisionActive = false;
bool hbulletCollisionActive = false;
int health = 100;



bool p2CollisionActive = false;
bool jeepCollisionActive = false;

void checkCollisionP2() {
	// Define p2's bounding box
	float p2Left = p2X + 1200; // Adjust based on how p2 is displayed
	float p2Right = p2Left + p2Width;
	float p2Bottom = 4;
	float p2Top = p2Bottom + 160;

	// Define character's bounding box
	float charLeft = charPosX;
	float charRight = charPosX + charWidth;
	float charBottom = charY;
	float charTop = charY + 120;

	// Check for overlap in both X and Y axes
	bool collisionX = charRight >= p2Left && charLeft <= p2Right;
	bool collisionY = charTop >= p2Bottom && charBottom <= p2Top;

	if (collisionX && collisionY) {
		if (!p2CollisionActive) {  // Prevent multiple deductions
			health -= 15;  // Adjust damage as needed
			if (health < 0)
				health = 0;
			p2CollisionActive = true;  // Set collision active
		}
	}
	else {
		p2CollisionActive = false;  // Reset collision flag when not colliding
	}
}
void checkCollisionJeep() {
	// Define jeep's bounding box
	float jeepLeft = jeepX;
	float jeepRight = jeepX + 120; // Width of jeep image
	float jeepBottom = 4;
	float jeepTop = jeepBottom + 130; // Height of jeep image

	// Define character's bounding box
	float charLeft = charPosX;
	float charRight = charPosX + charWidth;
	float charBottom = charY;
	float charTop = charY + 120;

	// Check for overlap in both X and Y axes
	bool collisionX = charRight >= jeepLeft && charLeft <= jeepRight;
	bool collisionY = charTop >= jeepBottom && charBottom <= jeepTop;

	if (collisionX && collisionY) {
		if (!jeepCollisionActive) {  // Prevent multiple deductions
			health -= 10;  // Adjust damage as needed
			if (health < 0)
				health = 0;
			jeepCollisionActive = true;  // Set collision active
		}
	}
	else {
		jeepCollisionActive = false;  // Reset collision flag when not colliding
	}
}


void checkCollisionW() {
	if (wShow) { // Check collision only if the water bottle is visible
		// Define bounding boxes
		float waterLeft = wX;
		float waterRight = wX + 80;
		float waterBottom = 160;
		float waterTop = 160 + 80;

		float charLeft = charPosX;
		float charRight = charPosX + charWidth;
		float charBottom = charY;
		float charTop = charY + 120;

		// Check for overlap in both X and Y axes
		bool collisionX = charRight >= waterLeft && charLeft <= waterRight;
		bool collisionY = charTop >= waterBottom && charBottom <= waterTop;

		if (collisionX && collisionY) {
			if (!carCollisionActive) {  // Prevent multiple deductions
				health += 10;  // Increase health by collecting water (assuming it's a health pack)
				if (health > 100)
					health = 100;
				wShow = false;  // Hide the water bottle after collection
				wX = screenWidth + 200;
				wTime = 0;
			}
		}
	}
}

// Function to check collision between character and car
void checkCollisionCar() {
	// Car's bounding box
	float carLeft = carPosX;
	float carRight = carPosX + carWidth;
	float carBottom = 4;
	float carTop = 4 + 160;

	// Character's bounding box
	float charLeft = charPosX;
	float charRight = charPosX + charWidth;
	float charBottom = charY;
	float charTop = charY + 120;

	// Check for overlap in both X and Y axes
	bool collisionX = charRight >= carLeft && charLeft <= carRight;
	bool collisionY = charTop >= carBottom && charBottom <= carTop;

	if (collisionX && collisionY) {
		if (!carCollisionActive) {  // Check if collision was not already active
			health -= 5;  // Reduce health by 1
			if (health < 0)
				health = 0;
			carCollisionActive = true;  // Set collision active
		}
	}
	else {
		carCollisionActive = false;  // Reset collision flag when not colliding
	}
}

// Function to check collision between character and bullets
void checkCollisionBullet() {
	// Collision with car-fired bullet
	if (bulletFired) {
		float bulletLeft = bulletX - 50;
		float bulletRight = bulletX;
		float bulletBottom = 50;
		float bulletTop = 50 + 30;

		float charLeft = charPosX;
		float charRight = charPosX + charWidth;
		float charBottom = charY;
		float charTop = charY + 120;

		bool collisionX = charRight >= bulletLeft && charLeft <= bulletRight;
		bool collisionY = charTop >= bulletBottom && charBottom <= bulletTop;

		if (collisionX && collisionY) {
			if (!bulletCollisionActive) {  // Prevent multiple deductions
				health -= 3;  // Reduce health by 5 for bullets
				if (health < 0)
					health = 0;

				// Reset the bullet
				bulletFired = false;
				bulletCollisionActive = true;
			}
		}
		else {
			bulletCollisionActive = false;
		}
	}

	// Collision with helicopter-fired bullet
	if (hbulletFired) {
		float hbulletLeft = hbx - 50;
		float hbulletRight = hbx;
		float hbulletBottom = hby - 120;  // Adjust based on your bullet's Y position logic
		float hbulletTop = hby + 30;

		float charLeft = charPosX;
		float charRight = charPosX + charWidth;
		float charBottom = charY;
		float charTop = charY + 120;

		bool collisionX = charRight >= hbulletLeft && charLeft <= hbulletRight;
		bool collisionY = charTop >= hbulletBottom && charBottom <= hbulletTop;

		if (collisionX && collisionY) {
			if (!hbulletCollisionActive) {  // Prevent multiple deductions
				health -= 5;  // Reduce health by 5 for bullets
				if (health < 0)
					health = 0;

				// Reset the helicopter bullet
				hbulletFired = false;
				hbulletCollisionActive = true;
			}
		}
		else {
			hbulletCollisionActive = false;
		}
	}
}

#define WINDOW_HEIGHT 40

#define HEALTH_BAR_WIDTH 100
#define HEALTH_BAR_HEIGHT 20

void drawHealthBars() {
	// Waterish blue color for the health bar

	iSetColor(255, 0, 0);  // Red color for health background
	iFilledRectangle(10, 360, HEALTH_BAR_WIDTH, HEALTH_BAR_HEIGHT);

	// Health bar foreground
	iSetColor(0, 128, 255);  // Blue color for current health
	float currentHealthWidth = (HEALTH_BAR_WIDTH * health) / 100.0;
	iFilledRectangle(10, 360, currentHealthWidth, HEALTH_BAR_HEIGHT);

	// White border for the health bar
	iSetColor(255, 255, 255);
	iRectangle(10, 360, HEALTH_BAR_WIDTH, HEALTH_BAR_HEIGHT);
}

void iDraw() {
	iClear();
	
	iShowImage(x, 0, screenWidth, 400, a);
	
	iShowImage(x + screenWidth, 0, screenWidth, 400, a);
	drawHealthBars();
	iShowImage(carPosX, 4, carWidth, 160, p);
	

	if (charRun == true)
	{
		iShowImage(charPosX, charY, charWidth, 120, b);
	}

	if (charSlide == true)
	{
		iShowImage(charPosX, charY, charWidth, 120, slideC);
		
		if (slideT >= 700)
		{
			charSlide = false;
			run = true;
			

			slideT = 0;
		}
	}
	
	
	
	
	iShowImage(heliX, 300, heliWidth, 120, h);
	
	// Background scrolling
	x -= 0.05;
	if (x < -600) {
		x = 0;
	}


	if (j >= 1)
	{
		if (heliX >= heliStop) {
			heliX -= 0.1;
		}
		else
		{
			heliX = heliStop;
		}
		if (heliX < 0) {
			heliX += 0.2; // helicopter moves right

		}
	}
	

	
	
	if (heliX <= heliStop && hbtime >= hbtime2 && !hbulletFired && j>=2) {
		hbulletFired = true;  // Set the bullet fired flag
		hbx = heliX + rand() % 300;  // Adjust bullet position to align with helicopter
		hby = rand() % 300 + 200;  // Align the bullet Y position with the helicopter's Y position
		hbtime = 0;
		
		
		
    }

		
	if (j >= 7)
	{
		hbulletFired = false;
	}

	if (hbulletFired) {
		iShowImage(hbx - 50, hby -(rand()%120), 50, 30, hb);
		hbx -= 0.0000000005;  // Adjust the bullet speed
		hby -= 0.0000000005;
		if (hbx < 5 || hby<5) {  // Reset the bullet once it goes off-screen
			hbulletFired = false;
		}
	}
	hbtime += 20;
	// Flying object appears after 20 seconds
	if (wTime >= wTime2 && wShow) {
		iShowImage(wX, 160, 80, 80, w);
		wX -= 0.1;  // Move the flying object
	}

	// Reset flying object's position once it goes off-screen
	if (wX < -80) {
		wX = screenWidth + 200;  // Reset position
		wTime = 0;  // Reset the timer for the next appearance
	}
	if (!wShow && wTime >= wTime2) {
		wShow = true;             // Make the water bottle visible again
		// Optionally, you can randomize the y-position or other attributes here
	}
	// Character movement logic
	if (run) {
		charPosX += 0.09;
		if (charPosX + charWidth >= screenWidth) {
			charPosX = screenWidth - charWidth;
		}
	}
	if (runback) {
		charPosX -= 0.09;
		if (charPosX <= 0) {
			charPosX = 0;
		}
	}

	
	if ( carPosX >= carStopPos ) {
		
		if (c1 >= c2)
		{
			carPosX -= 0.1;
		}

	}
	

	if (c1 >= c2 && btime > btime2 && !bulletFired) {
		bulletFired = true;  // Set the bullet fired flag
		bulletX = carPosX;
		btime = 0;


	}

	// Reset flying object's position once it goes off-screen
	if (bulletFired) {
		iShowImage(bulletX - 50, 50, 50, 30, bullet);
		bulletX -= 0.0000000005;
		if (bulletX<30)
		{
			bulletFired = false;


		}
	}
	btime += 100;

	if (cTime >= cTime2) {
		carPosX += 0.2;  // Move the flying object
		bulletX = false;

		iShowImage(p2X+1200, 4, carWidth, 160, p);
		p2X -= 0.5;

		if (p2X<-1.0 && carPosX > 1000 )
		{
			iShowImage(jeepX , 4, 120, 130, jeep);
			jeepX -= 0.2;
			if (jeepX <-120)
			{
				j++;
				if (j < 4)
				{
					jeepX = screenWidth+1000;  // Reset jeep position to reappear

				}
				else
				{
					jeepX = -120;
				}
				
				
			}
			
		}
		

		
	
	
	
}
	

	
	

	// Jumping logic
	if (jump  ) {
		if (jumpUp) {
			charY += 0.08;
			if (charY >= jumpHeight) {
				jumpUp = false;
			}
		}
		else {
			charY -= 0.09;
			if (charY <= 20) {
				charY = 20;
				jump = false;
				jumpUp = false;
			}
		}
	}
	
	
	checkCollisionW();
	checkCollisionCar();      // Existing car collision
	checkCollisionBullet();   // Existing bullet collision
	checkCollisionP2();       // New p2 collision
	checkCollisionJeep();
	
}

void change() {
	wTime += 20;
	cTime += 20;
	btime += 100;
	c1 += 20;
	st += 50;
	hbtime += 50;
	slideT += 20;

}

void iMouseMove(int mx, int my) {}

void iPassiveMouseMove(int mx, int my) {}

void iMouse(int button, int state, int mx, int my) {
	if (button == GLUT_LEFT_BUTTON && state == GLUT_DOWN) {}

	if (button == GLUT_RIGHT_BUTTON && state == GLUT_DOWN) {}
}

void iKeyboard(unsigned char key) {
	if (key == 'd') {
		stand = false;
		run = true;
		runback = false;
	}
	if (key == 'a') {
		stand = false;
		run = false;
		runback = true;
	}
	if (key == 's' && !slide) {
		stand = false;
		run = false;
		runback = false;
		
		slide = true;
	}
	if (key == 'w' && !jump) {
		jump = true;
		jumpUp = true;
	}
}

void iSpecialKeyboard(unsigned char key) {
	if (key == GLUT_KEY_RIGHT) {
		run = true;
		runback = false;
		charRun = true;
		charSlide = false;
	}
	if (key == GLUT_KEY_LEFT) {
		run = false;
		runback = true;
		charRun = true;
		charSlide = false;
	}
	if (key == GLUT_KEY_UP) {
		jump = true;
		jumpUp = true;
		charRun = true;
		charSlide = false;
	}
	if (key == GLUT_KEY_DOWN) {
		jump = false;
		jumpUp = false;
		stand = false;
		run = true;
		runback = true;

		
		charRun = true;
		charSlide = true;
	}
}

int main() {
	iInitialize(600, 400, "July 36th");

	a = iLoadImage("./images/du.jpg");
	b = iLoadImage("./images/student.png");
	p = iLoadImage("./images/police.jpg");
	w = iLoadImage("./images/water.png");
	h = iLoadImage("./images/police.jpg");
	bullet = iLoadImage("./images/bullet.png");
	hb = iLoadImage("./images/bullet.png");
	s = iLoadImage("./images/student.jpg");
	jeep = iLoadImage("./images/bike.jpg");
	p2 = iLoadImage("./images/police.jpg");
	slideC = iLoadImage("./images/slide.jpg");

	iSetTimer(20, change);
	iStart();

	return 0;
}

#include "iGraphics.h"
#include <stdlib.h>
#include <time.h>
#define JUMP_LIMIT 30

using namespace std;
int a, b, p, w, h, bullet,s ,hb, jeep, p2,standing,con,start,e;
float x = 0;
bool stand = true;
bool run = false;
bool runback = false;
float charPosX = 10;
float charY = 2;
bool gameStart = true;
const int jumpHeight = 100;
const int screenWidth = 600;
const int charWidth = 100;
const int p2Width = 200;
float carPosX = screenWidth;
float jeepPosX = screenWidth;
float p2X = screenWidth;
float heliX = screenWidth;
float heliWidth = 320;
float c1 = 0;
float c2 = 4000;
float carStopPos = 360;

float p2StopPos = 360;
float heliStop = 300;
const int carWidth = 300;
float wX = 1200;
bool jump = false;
bool jumpUp = false;
bool wShow = true;
int bulletX = 300;
int hbx = heliStop;
int hby = 40;
int cTime = 0;
int st = 0;
int st2 = 1000;
float eX = screenWidth;
float eY = 200;
bool slide = false;
int eTime = 0;
int eTime2 = 5000;
bool started=false;
int j = 0;
int carA = 0;

const int cTime2 = 20000;
int wTime = 0;
const int wTime2 = 2000;  

bool bulletFired = false; 
int btime = 1000;
int btime2 = 400000;
bool hbulletFired = false;
int hbtime = 0;
int hbtime2 = 20000;


float jeepX = screenWidth;

bool charRun = false;
bool charSlide = false;


int slideX = 0;
int slideT = 0;

bool carCollisionActive = false;
bool bulletCollisionActive = false;
bool hbulletCollisionActive = false;
int health = 100;



bool p2CollisionActive = false;
bool jeepCollisionActive = false;


bool healthZ = false;
void checkCollisionP2() {
	float p2Left = p2X + 1200; 
	float p2Right = p2Left + p2Width;
	float p2Bottom = 4;
	float p2Top = p2Bottom + 160;

	float charLeft = charPosX;
	float charRight = charPosX + charWidth;
	float charBottom = charY;
	float charTop = charY + 120;

	bool collisionX = charRight >= p2Left && charLeft <= p2Right;
	bool collisionY = charTop >= p2Bottom && charBottom <= p2Top;

	if (collisionX && collisionY) {
		if (!p2CollisionActive) { 
			health -= 15;  
			if (health < 0)
			{
				health = 0;
				healthZ = true;
			}
			p2CollisionActive = true;  
		}
	}
	else {
		p2CollisionActive = false; 
	}
}
void checkCollisionJeep() {
	float jeepLeft = jeepX;
	float jeepRight = jeepX + 120; 
	float jeepBottom = 4;
	float jeepTop = jeepBottom + 130; 

	float charLeft = charPosX;
	float charRight = charPosX + charWidth;
	float charBottom = charY;
	float charTop = charY + 120;

	bool collisionX = charRight >= jeepLeft && charLeft <= jeepRight;
	bool collisionY = charTop >= jeepBottom && charBottom <= jeepTop;

	if (collisionX && collisionY) {
		if (!jeepCollisionActive) {
			health -= 10;  
			if (health < 0)
			{
				health = 0;
				healthZ = true;
			}
			jeepCollisionActive = true; 
		}
	}
	else {
		jeepCollisionActive = false;  
	}
}


void checkCollisionW() {
	if (wShow) { 
		float waterLeft = wX;
		float waterRight = wX + 80;
		float waterBottom = 160;
		float waterTop = 160 + 80;

		float charLeft = charPosX;
		float charRight = charPosX + charWidth;
		float charBottom = charY;
		float charTop = charY + 120;

		bool collisionX = charRight >= waterLeft && charLeft <= waterRight;
		bool collisionY = charTop >= waterBottom && charBottom <= waterTop;

		if (collisionX && collisionY) {
			if (!carCollisionActive) {  
				health += 10;  
				if (health > 100)
					health = 100;
				wShow = false; 
				wX = screenWidth + 200;
				wTime = 0;
			}
		}
	}
}

void checkCollisionCar() {
	float carLeft = carPosX;
	float carRight = carPosX + carWidth;
	float carBottom = 4;
	float carTop = 4 + 160;

	float charLeft = charPosX;
	float charRight = charPosX + charWidth;
	float charBottom = charY;
	float charTop = charY + 120;

	bool collisionX = charRight >= carLeft && charLeft <= carRight;
	bool collisionY = charTop >= carBottom && charBottom <= carTop;

	if (collisionX && collisionY) {
		if (!carCollisionActive) {
			health -= 5;  
			if (health < 0)
			{
				health = 0;
				healthZ = true;
			}
			carCollisionActive = true;  
		}
	}
	else {
		carCollisionActive = false; 
	}
}

void checkCollisionBullet() {
	if (bulletFired) {
		float bulletLeft = bulletX - 50;
		float bulletRight = bulletX;
		float bulletBottom = 50;
		float bulletTop = 50 + 30;

		float charLeft = charPosX;
		float charRight = charPosX + charWidth;
		float charBottom = charY;
		float charTop = charY + 120;

		bool collisionX = charRight >= bulletLeft && charLeft <= bulletRight;
		bool collisionY = charTop >= bulletBottom && charBottom <= bulletTop;

		if (collisionX && collisionY) {
			if (!bulletCollisionActive) { 
				health -= 3;  
				if (health < 0)
				{
					health = 0;
					healthZ = true;
				}

				bulletFired = false;
				bulletCollisionActive = true;
			}
		}
		else {
			bulletCollisionActive = false;
		}
	}

	if (hbulletFired) {
		float hbulletLeft = hbx - 50;
		float hbulletRight = hbx;
		float hbulletBottom = hby - 120;  
		float hbulletTop = hby + 30;

		float charLeft = charPosX;
		float charRight = charPosX + charWidth;
		float charBottom = charY;
		float charTop = charY + 120;

		bool collisionX = charRight >= hbulletLeft && charLeft <= hbulletRight;
		bool collisionY = charTop >= hbulletBottom && charBottom <= hbulletTop;

		if (collisionX && collisionY) {
			if (!hbulletCollisionActive) { 
				health -= 5;  
				if (health < 0)
				{
					health = 0;
					healthZ = true;
				}

				hbulletFired = false;
				hbulletCollisionActive = true;
			}
		}
		else {
			hbulletCollisionActive = false;
		}
	}
}

#define WINDOW_HEIGHT 40

#define HEALTH_BAR_WIDTH 100
#define HEALTH_BAR_HEIGHT 20

void drawHealthBars() {

	iSetColor(255, 0, 0); 
	iFilledRectangle(10, 360, HEALTH_BAR_WIDTH, HEALTH_BAR_HEIGHT);

	iSetColor(0, 128, 255);  
	float currentHealthWidth = (HEALTH_BAR_WIDTH * health) / 100.0;
	iFilledRectangle(10, 360, currentHealthWidth, HEALTH_BAR_HEIGHT);

	iSetColor(255, 255, 255);
	iRectangle(10, 360, HEALTH_BAR_WIDTH, HEALTH_BAR_HEIGHT);
}

void iDraw() {
	iClear();
	

	
	
	
	
	iShowImage(x, 0, screenWidth, 400, a);
	
	
	iShowImage(x + screenWidth, 0, screenWidth, 400, a);
	if (stand && !healthZ  && !gameStart)
	{
		iShowImage(charPosX, charY, charWidth, 120, standing);
		if (j <= 0)
		{
			iSetColor(255, 0, 0); 
			iText(255, 330, "Press arrow keys to run", GLUT_BITMAP_HELVETICA_18);
		}

	}
	
	drawHealthBars();
	if (!gameStart)
	{
		iShowImage(carPosX, -50, carWidth, 240, p);
	}
	
	

	if (charRun && !healthZ&& !gameStart)
	{
		iShowImage(charPosX, charY, charWidth, 120, b);
		stand=false;
	}

	
	
	
	
	
	iShowImage(heliX, 200, heliWidth, 300, h);
	
	if (j < 100 && !stand && !healthZ && !gameStart)
	{
		x -= 0.05;
		if (x < -600) {
			x = 0;
		}

	}

	if (j >= 1 && !healthZ && !gameStart)
	{
		if (heliX >= heliStop) {
			heliX -= 0.05;
		}
		else
		{
			heliX = heliStop;
		}
		if (heliX < 0) {
			heliX += 0.2; 
			
			

		}
	}
	
		
	
	

	
	
	if (heliX <= heliStop && hbtime >= hbtime2 && !hbulletFired && j >= 3 && !healthZ && !gameStart) {
		hbulletFired = true; 
		hbx = heliX + rand() % 300; 
		hby = rand() % 300 + 200;  
		hbtime = 0;
		
		
		
    }

		


	if (hbulletFired && !healthZ && !gameStart) {
		iShowImage(hbx - 50, hby -(rand()%120), 50, 30, hb);
		hbx -= 0.0000000005; 
		hby -= 0.0000000005;
		if (hbx < 5 || hby<5) {  
			hbulletFired = false;
		}
	}
	hbtime += 20;
	if (wTime >= wTime2 && wShow && !gameStart) {
		iShowImage(wX, 140, 40, 50, w);
		wX -= 0.1;  
	}

	if (wX < -80 && !healthZ && !gameStart) {
		wX = screenWidth + 200;  
		wTime = 0; 
	}
	if (!wShow && wTime >= wTime2&& !gameStart) {
		wShow = true;             
	}
	if (run && !healthZ && !gameStart) {
		charPosX += 0.09;
		if (charPosX + charWidth >= screenWidth) {
			charPosX = screenWidth - charWidth;
		}
	}
	if (runback && !gameStart) {
		charPosX -= 0.09;
		if (charPosX <= 0) {
			charPosX = 0;
		}
	}

	
	if (carPosX >= carStopPos && !healthZ && !gameStart) {
		
		if (c1 >= c2)
		{
			carPosX -= 0.1;
		}

	}
	

	if (c1 >= c2 && btime > btime2 && !bulletFired && !healthZ && !gameStart) {
		bulletFired = true;  
		bulletX = carPosX;
		btime = 0;


	}

	if (bulletFired && !healthZ && !gameStart) {
		iShowImage(bulletX - 50, 50, 50, 30, bullet);
		bulletX -= 0.0000000005;
		if (bulletX<30)
		{
			bulletFired = false;


		}
	}
	btime += 100;

	if (cTime >= cTime2 && !healthZ && !gameStart) {
		carPosX += 0.2;  // Move the flying object
		bulletX = false;

		iShowImage(p2X+1200, 4, 370 , 115, p2);
		p2X -= 0.5;

		if (p2X<-1.0 && carPosX > 1000 && !gameStart)
		{
			iShowImage(jeepX , 4, 180, 150, jeep);
			jeepX -= 0.2;
			if (jeepX <-120)
			{
				j++;
				if (j < 8)
				{
					jeepX = screenWidth+1000;  // Reset jeep position to reappear

				}
				else
				{
					jeepX = -120;
				}
				
				
			}
			
		}
		

		
	
	
	
}
	

	
	

	if (jump  && !healthZ && !gameStart) {
		if (jumpUp) {
			charY += 0.08;
			if (charY >= jumpHeight) {
				jumpUp = false;
			}
		}
		else {
			charY -= 0.09;
			if (charY <= 20) {
				charY = 7;
				jump = false;
				jumpUp = false;
			}
		}
	}
	


	
	checkCollisionW();
	checkCollisionCar();      
	checkCollisionBullet();   
	checkCollisionP2();       
	checkCollisionJeep();
	
	if (j >= 9 && !healthZ && !gameStart)
	{
		hbulletFired = false;
		heliX += 0.2;
		charRun = false;
		stand = true;
		run = false;
		runback = false;
		jump = true;
		

			iShowImage(eX, 300, 120, 100, e);
			
				eX -= 0.1;

			

				iSetColor(255, 0, 0);
				iText(280, 330, "we WON", GLUT_BITMAP_HELVETICA_18);
				iText(271, 310, "press n to exit", GLUT_BITMAP_HELVETICA_18);
		



	
	}
	iShowImage(heliX, 200, heliWidth, 300, h);
	if (healthZ)
	{

		iShowImage(0, 0, 600, 400, con);
	}
	
	if (gameStart)
	{
	
		iShowImage(0, 0, 600, 400, start);
		iSetColor(255, 0, 0);
		iText(245, 20, "Thanks for playing, artwork credits to ChatGPT", GLUT_BITMAP_HELVETICA_18);
		
	}

	
}

void change() {
	if (!gameStart)
	{
		wTime += 20;
		cTime += 20;
		btime += 100;
		c1 += 20;
		st += 50;
		hbtime += 50;
		eTime += 20;
	}
	
	

}

void iMouseMove(int mx, int my) {}

void iPassiveMouseMove(int mx, int my) {}

void iMouse(int button, int state, int mx, int my) {
	if (button == GLUT_LEFT_BUTTON && state == GLUT_DOWN) {}

	if (button == GLUT_RIGHT_BUTTON && state == GLUT_DOWN) {}
}

void iKeyboard(unsigned char key) {
	if (key == ' ')
	{
		gameStart = false;
	}
	if (key == 'y' || key == 'Y' && !gameStart)
	{
		healthZ = false;
		health = 100;
	}
	if (key == 'n')
	{
		exit(0);
	}
	if (key == 'd' && !gameStart) {
		stand = false;
		run = true;
		runback = false;
		charRun = true;
	}
	if (key == 'a' && !gameStart) {
		stand = false;
		run = false;
		runback = true;
		charRun = true;
	}
	
	if (key == 'w' && !jump && !gameStart) {
		stand = false;
		jump = true;
		jumpUp = true;
		charRun = true;
	}
}

void iSpecialKeyboard(unsigned char key) {
	if (key == GLUT_KEY_RIGHT) {
		stand = false;
		run = true;
		runback = false;
		charRun = true;
		
	}
	if (key == GLUT_KEY_LEFT) {
		stand = false;
		run = false;
		runback = true;
		charRun = true;
		
	}
	if (key == GLUT_KEY_UP) {
		stand = false;
		jump = true;
		jumpUp = true;
		charRun = true;
		
	}
	if (key == GLUT_KEY_DOWN) {
		
		
	}
}

int main() {
	iInitialize(600, 400, "Iron Horizon");

	a = iLoadImage("./images/du.jpg");
	b = iLoadImage("./images/run.png");
	p = iLoadImage("./images/police.png");
	w = iLoadImage("./images/water.png");
	h = iLoadImage("./images/helicopter.png");
	bullet = iLoadImage("./images/bullet.png");
	hb = iLoadImage("./images/bullet.png");
	s = iLoadImage("./images/run.png");
	jeep = iLoadImage("./images/bike.png");
	p2 = iLoadImage("./images/police2.png");
	standing  = iLoadImage("./images/student.png");
	con = iLoadImage("./images/continue.png");
	start = iLoadImage("./images/start.png");
	e = iLoadImage("./images/e.png");

	

	iSetTimer(20, change);
	iStart();

	return 0;
}
